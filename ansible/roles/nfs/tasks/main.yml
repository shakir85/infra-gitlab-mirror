---
# tasks file for nfs
# Will mount two NFS points:
# .
# └── /<hostname>/
#     ├── data/
#     └── config/

- name: Install NFS utils for Debian based servers
  when: ansible_os_family == 'Debian'
  ansible.builtin.apt:
    name:
      - nfs4-acl-tools
      - nfs-common
    state: present

- name: Install NFS utils for RHEL based servers
  when: ansible_os_family == 'RedHat'
  ansible.builtin.yum:
    name:
      - nfs4-acl-tools
      - nfs-utils
    state: present

# This task serves as a workaround for what appears to be a bug when starting the NFS service using systemd.
# In a fresh `nfs-common` installation on Debian 11 and 12, the systemd service path mentioned below is a symbolic
# link to /dev/null. As a result, systemd marks the NFS service status as 'dead'.
#
# This situation creates a circular issue: to enable a dead service, you need to 'unmask' it first.
# But, because the service is dead, systemd cannot unmask it! :).
#
# The solution is to remove the symbolic link to /dev/null and reload the NFS systemd service to generate
# the correct symlink to the NFS systemd service file.
#
# Discovering this bug was challenging because the error message from the mounting command was misleading:
#   >> Error message: mount: 10.10.50.38:/volume1/test /data: can't find in /etc/fstab.
#   >> Error from Ansible: Unable to start service nfs-common: Failed to start nfs-common.service:
# Unit nfs-common.service is masked.
#
# Note: Neither the 'masked: false' Ansible directive nor 'command: systemctl unmask ...' worked.
- name: Fix NFS Systemd service file
  when: ansible_distribution == 'Debian'
  block:
    - name: Remove broken NFS service file
      ansible.builtin.file:
        path: /lib/systemd/system/nfs-common.service
        state: absent
    # This should generate the correct '/lib/systemd/system/nfs-common.service' file
    - name: Force systemd daemon to reread systemd-units configs
      ansible.builtin.systemd:
        daemon_reload: true

- name: Ensure NFS client service is running
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - nfs-common
    - nfs-client.target

- name: Check mount points exist on /{{ inventory_hostname }}
  ansible.builtin.file:
    path: "/{{ inventory_hostname }}/{{ item }}"
    state: directory
    owner: "{{ default_user }}"
    group: "{{ default_user }}"
    recurse: true
  loop: "{{ nfs_mount_points }}"
  # Avoid chmod/chown errors; sometimes shares are owned by nfs root
  ignore_errors: true
  register: ignore_errors_register

- name: Check NFS source
  ansible.builtin.debug:
    msg:
      - NFS source => {{ nfs_mount }}/{{ nfs_share }}

- name: Mount NFS shares
  ansible.posix.mount:
    src: "{{ nfs_mount }}/{{ item }}"
    path: "/{{ inventory_hostname }}/{{ item }}"
    fstype: nfs
    opts: "rw,sync"
    state: mounted
    # Ensure directories exist on NAS first!
  loop: "{{ nfs_mount_points }}"
